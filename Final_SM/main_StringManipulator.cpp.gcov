        -:    0:Source:main_StringManipulator.cpp
        -:    0:Graph:main_StringManipulator.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:#include "StringManipulator.h"
        -:    3:#include <iostream>
        -:    4:
        -:    5:int main() {
        -:    6:    // Example string
        -:    7:    std::string example = "Hello World";
        -:    8:    
        -:    9:    // Using the static methods of StringManipulator
        -:   10:    std::string reversed = StringManipulator::reverseString(example);
        -:   11:    std::string upper = StringManipulator::toUpperCase(example);
        -:   12:    std::string lower = StringManipulator::toLowerCase(example);
        -:   13:    bool isPalindrome = StringManipulator::isPalindrome(example);
        -:   14:    int vowelCount = StringManipulator::countVowels(example);
        -:   15:    std::string replaced = StringManipulator::replaceChar(example, 'o', 'a');
        -:   16:
        -:   17:    // Displaying results
        -:   18:    std::cout << "Original: " << example << std::endl;
        -:   19:    std::cout << "Reversed: " << reversed << std::endl;
        -:   20:    std::cout << "Uppercase: " << upper << std::endl;
        -:   21:    std::cout << "Lowercase: " << lower << std::endl;
        -:   22:    std::cout << "Is Palindrome: " << (isPalindrome ? "Yes" : "No") << std::endl;
        -:   23:    std::cout << "Vowel Count: " << vowelCount << std::endl;
        -:   24:    std::cout << "Replaced 'o' with 'a': " << replaced << std::endl;
        -:   25:
        -:   26:    return 0;
        -:   27:}
        -:   28:*/
        -:   29:
        -:   30:#include "StringManipulator.h"
        -:   31:#include <iostream>
        -:   32:#include <string>
        -:   33:
    #####:   34:int main() {
    #####:   35:    std::string input;
        -:   36:    int choice;
        -:   37:
    #####:   38:    std::cout << "Enter a string: ";
    #####:   39:    std::getline(std::cin, input);
        -:   40:
    #####:   41:    std::cout << "Choose an operation to perform on the string:\n";
    #####:   42:    std::cout << "1 - Reverse the string\n";
    #####:   43:    std::cout << "2 - Convert to uppercase\n";
    #####:   44:    std::cout << "3 - Convert to lowercase\n";
    #####:   45:    std::cout << "4 - Replace substring\n";
    #####:   46:    std::cout << "5 - Remove substring\n";
    #####:   47:    std::cout << "6 - Count words\n";
    #####:   48:    std::cout << "7 - Check if palindrome\n";
    #####:   49:    std::cout << "8 - Find substring\n";
    #####:   50:    std::cout << "9 - Split by delimiter\n";
    #####:   51:    std::cout << "10 - Encode with ROT13\n";
    #####:   52:    std::cout << "11 - Count character frequency\n";
    #####:   53:    std::cout << "Enter your choice: ";
    #####:   54:    std::cin >> choice;
    #####:   55:    std::cin.ignore();  // Clear newline character from the buffer after reading integer
        -:   56:
    #####:   57:    switch (choice) {
        -:   58:        case 1:
    #####:   59:            std::cout << "Reversed string: " << StringManipulator::reverse(input) << std::endl;
    #####:   60:            break;
        -:   61:        case 2:
    #####:   62:            std::cout << "Uppercase string: " << StringManipulator::toUpperCase(input) << std::endl;
    #####:   63:            break;
        -:   64:        case 3:
    #####:   65:            std::cout << "Lowercase string: " << StringManipulator::toLowerCase(input) << std::endl;
    #####:   66:            break;
        -:   67:        case 4: {
    #####:   68:            std::string from, to;
    #####:   69:            std::cout << "Enter the substring to replace: ";
    #####:   70:            std::getline(std::cin, from);
    #####:   71:            std::cout << "Enter the replacement string: ";
    #####:   72:            std::getline(std::cin, to);
    #####:   73:            std::cout << "Resulting string: " << StringManipulator::replace(input, from, to) << std::endl;
        -:   74:            break;
    #####:   75:        }
        -:   76:        case 5: {
    #####:   77:            std::string substring;
    #####:   78:            std::cout << "Enter the substring to remove: ";
    #####:   79:            std::getline(std::cin, substring);
    #####:   80:            std::cout << "Resulting string: " << StringManipulator::remove(input, substring) << std::endl;
        -:   81:            break;
    #####:   82:        }
        -:   83:        case 6:
    #####:   84:            std::cout << "Number of words: " << StringManipulator::countWords(input) << std::endl;
    #####:   85:            break;
        -:   86:        case 7:
    #####:   87:            std::cout << "Is palindrome: " << (StringManipulator::isPalindrome(input) ? "Yes" : "No") << std::endl;
    #####:   88:            break;
        -:   89:        case 8: {
    #####:   90:            std::string substring;
    #####:   91:            std::cout << "Enter the substring to find: ";
    #####:   92:            std::getline(std::cin, substring);
    #####:   93:            size_t pos = StringManipulator::findSubstring(input, substring);
    #####:   94:            if (pos != std::string::npos)
    #####:   95:                std::cout << "Substring found at position: " << pos << std::endl;
        -:   96:            else
    #####:   97:                std::cout << "Substring not found." << std::endl;
        -:   98:            break;
    #####:   99:        }
        -:  100:        case 9: {
        -:  101:            char delimiter;
    #####:  102:            std::cout << "Enter a single character delimiter: ";
    #####:  103:            std::cin >> delimiter;
    #####:  104:            std::vector<std::string> parts = StringManipulator::split(input, delimiter);
    #####:  105:            std::cout << "Split parts:\n";
    #####:  106:            for (const auto& part : parts) {
    #####:  107:                std::cout << part << std::endl;
        -:  108:            }
        -:  109:            break;
    #####:  110:        }
        -:  111:        case 10:
    #####:  112:            std::cout << "ROT13 encoded string: " << StringManipulator::rot13(input) << std::endl;
    #####:  113:            break;
        -:  114:
        -:  115:        return 0;
        -:  116:        
        -:  117:    }
    #####:  118:}
        -:  119:
        -:  120:
        -:  121://         case 11: {
        -:  122://             auto frequencies = StringManipulator::charFrequency(input);
        -:  123://             std::cout << "Character frequencies:\n";
        -:  124://             for (const auto& [char, freq] : frequencies) {
        -:  125://                 std::cout << char << ": " << freq << std::endl;
        -:  126://             }
        -:  127://             break;
        -:  128://         }
        -:  129://         default:
        -:  130://             std::cout << "Invalid option selected." << std::endl;
        -:  131://             break;
        -:  132://     }
        -:  133:
        -:  134://     return 0;
        -:  135:// }
